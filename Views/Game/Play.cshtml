@model List<object> // Or a specific ViewModel class if you create one

@{
    ViewData["Title"] = "CipherJourney-Play";
}

<style>
    /* Target the form */
    #guessForm {
        /* This is the key property to center inline/inline-block children */
        text-align: center;
        /* Add some space above the form if desired */
        margin-top: 20px;
        /* Optional: If the form itself isn't wide enough,
           you might need to make it wider or center the form block.
           These are often NOT needed if a parent container handles width. */
        /* width: 100%; */
        /* max-width: 700px; /* Example max width */
        /* margin-left: auto; */
        /* margin-right: auto; */
    }

    /* Ensure input behaves as inline-block to respect text-align */
    #guessInput {
        display: inline-block;
        vertical-align: middle; /* Helps align with the button */
        /* KEEP all your existing styles like padding, margin-right, border etc. */
        margin-right: 10px;
        padding: 6px;
        /* border: ...; */
        /* font-size: ...; */
    }

    /* Ensure button behaves as inline-block to respect text-align */
    #guessForm button[type="submit"] {
        display: inline-block;
        vertical-align: middle; /* Helps align with the input */
        /* KEEP all your existing styles like padding, font-weight, background-color, color, border, border-radius etc. */
        padding: 6px 12px;
        font-weight: bold;
        background-color: #007bff;
        color: white;
        border: none;
        border-radius: 6px;
        /* cursor: pointer; */ /* Good practice for buttons */
    }

        /* Keep your button hover effect */
        #guessForm button[type="submit"]:hover {
            background-color: #0056b3;
        }

    /* Keep your sentence display styles */
    #sentenceDisplay {
        display: flex;
        flex-wrap: wrap;
        gap: 10px; /* Using gap is good */
        justify-content: center;
        margin-bottom: 20px;
    }

    /* Keep guess counter styles */
    #guessCounterDisplay {
        text-align: center;
        margin-top: 15px;
        font-size: 1.1em;
    }

    /* Keep word box styles (.word / .word-box / .correct / .guessed) */
    .word { /* Or .word-box */
        /* ... your existing box styles ... */
        display: inline-block; /* Keep this */
        padding: 8px 12px;
        margin: 0; /* Remove margin if using gap in parent */
        border: 1.5px solid #ccc;
        border-radius: 10px;
        font-size: 18px;
        font-weight: 500;
        background-color: #f9f9f9;
        transition: all 0.2s ease;
    }

        .word.correct { /* Or .word-box.guessed */
            /* ... your existing correct styles ... */
            background-color: #90ee90;
            color: #000000; /* Ensure black text */
            border-color: #5cb85c;
            font-weight: bold;
        }
</style>


<div class="container">

    <div class="row">

        <div class="col-md-12" style="border: solid 1.5px">
            <h2 class="text-center">Let’s see what the sentence of the day is...</h2>
            <div id="guessCounterDisplay" style="text-align: center; margin-top: 15px; font-size: 1.1em;">
                Guesses Made: <span id="guessCountValue">@ViewData["InitialGuessCount"]</span>
            </div>
            <div class="d-flex flex-wrap justify-content-center" id="cipheredSentence">

                
                <form id="guessForm">
                    <div id="sentenceDisplay" style="justify-content: center">
                        @foreach (var item in Model) // Iterate through the list
                        {
                            // Access properties directly
                            var displayText = item.GetType().GetProperty("displayText").GetValue(item, null).ToString();
                            var isGuessed = (bool)item.GetType().GetProperty("isGuessed").GetValue(item, null);
                            var wordClass = isGuessed ? "word correct" : "word"; // Combine classes

                            // Use cssClass variable below
                            <span class="@wordClass">@displayText</span>
                        }
                    </div>
                    @{
                            // Helper variable to make the condition cleaner
                        var disableInput = ViewData["IsComplete"] as bool? == true;
                    }

                    <input type="text" id="guessInput"
                           placeholder="Enter your guess"
                           @(disableInput ? "disabled" : "") />  
                    <button type="submit" @(disableInput ? "disabled" : "")> Submit </button>    
                        
                </form>

            </div>

            <div id="resultMessage"></div> <!-- Message area -->

        </div>
    </div>
</div>

@section Scripts {
    <script>
        $(document).ready(function () {
            $("#guessForm").submit(function (e) {
                e.preventDefault();
                const guess = $("#guessInput").val().trim();
                if (!guess) return;

                $.ajax({
                    type: "POST",
                    url: "@Url.Action("CheckGuess", "Game")", // Use Url.Action
                    data: { guess: guess },
                    dataType: "json",
                    // Inside the $.ajax success callback

                    success: function (response) {
                        if (response.error) {
                            $("#resultMessage").text(response.error).css('color', 'red');
                            return; // Stop if server reported an application error
                        }

                        if (response.success && response.sentenceDisplay) {
                            const sentenceDisplayContainer = $("#sentenceDisplay");
                            sentenceDisplayContainer.empty(); // Clear previous words

                            response.sentenceDisplay.forEach(wordInfo => {
                                const span = $("<span></span>");
                                span.text(wordInfo.displayText);

                                // Use consistent class names ('word' and 'correct' based on previous CSS)
                                span.addClass("word"); // Base class

                                if (wordInfo.isGuessed) {
                                    span.addClass("correct"); // Guessed class
                                }
                                sentenceDisplayContainer.append(span);
                            });

                            $("#guessInput").val(""); // Clear input

                            // --- ADD CODE TO UPDATE GUESS COUNT ---
                            if (response.currentGuessCount !== undefined) { // Check if count was sent
                                $("#guessCountValue").text(response.currentGuessCount);
                            }
                            // --- END ADD ---

                            // --- REMOVED THE "Guess submitted!" line here ---

                            // Check if all guessed logic
                            const allGuessed = response.sentenceDisplay.every(item => item.isGuessed);
                            if (allGuessed) {
                                $("#resultMessage").text("Congratulations! You solved it!").css('color', 'blue');
                                // ---- THIS IS THE KEY PART ----
                                $("#guessInput").prop('disabled', true); // Disables input
                                $("#guessForm button[type='submit']").prop('disabled', true); // Disables button
                                // ---- END KEY PART ----
                            }

                        } else {
                            // Handle case where success might be true but sentenceDisplay is missing?
                            $("#resultMessage").text("Received invalid response structure from server.").css('color', 'orange');
                        }
                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                        console.error("AJAX Error:", textStatus, errorThrown, jqXHR.responseText);
                        $("#resultMessage").text("An error occurred. Please try again.").css('color', 'red');
                    }
                });
            });
        });
    </script>
}